明确压力是否传递至数据库，或者说瓶颈点是否在数据库侧。
可以查询数据库所在主机的CPU使用率、数据库相关视图，或者OPS上相关指标，明确可能是业务侧问题还是数据库侧问题，下面手段可以看一下是否有相关的压力传递至数据库。如果说数据库活跃会话极少，数据库的吞吐大概率是无法上来：
    ·pg_stat_activity/pgxc_stat_activity-关注state状态为非idle的会话
    ·dbe_perf.local_threadpool_status/dbe_perfglobal_threadpool_status-关注session_info字段 OPS上实例监控相关指标·CPU占用率·活跃会话数量

如果数据库侧未明显感知到业务压力，或者压力不够大，资源消耗极低，比如:CPU不足IO%、活跃会话数量个位数，则建议业务侧进行相关排查，比较常见的情况可能有如下原因:·应用服务器资源耗尽，CPU/IO/内存不足;·应用服务器和数据库网络时延过高;
·应用服务器处理查询结果慢，导致事务内SQL语句下发至数据库慢;·等等;

==========================================================================================

排查数据库所在系统资源是否有异常
·CPU满
    ·可通过OPSCPU使用率或者操作系统top命令查看CPU使用率;也可以使用sar命令，查看历史的CPU使用率
    ·找到CPU使用率高的进程，如果是数据库导致的CPU异常，通常预期是gaussdb进程占用较高。
    ·如果为某段时间内CPU高，则可比较正常时间段和异常时间段的WDR报告中Top SQL order by CPU部分可参考WDR报告分析
    ·如果CPU一直较高，方法一:可直接使用WDR报告中SQL ordered by CPU Time部分，尝试优化分析相关语句，可参考WDR报告分析;方法二:可参考Chapter 1.3如果短时间CPU异常，可参考Chapter 1.3
    ·如果仍然无法分析出CPU消耗原因，可以生成异常时间段内的火焰图，找到数据库代码函数的瓶颈点。可参考火焰图分析

==========================================================================================

排查数据库所在系统资源是否有异常
·IO满/IO异常
    ·表现为iostat内%util满、或者r_await较高(一般大于3ms)、或者w_await较高(一股大于3ms)。
    ·如果上述IO的指标存在异常，比如读写量上不去、时延较高，可联系操作系统相关同事分析，可能的原因有:(1)硬盘cache/raid写策略配置问题;(2)磁盘带宽被限流(OBS本身有流控)
    ·如果本身IO量大，可以使用pidstat/iotop来分析IO量消耗的线程。(1) pidstat-dt-pgaussdb进程号(2)iotop
    ·通常是TPLworker线程消耗的1O读写量异常，代表用户SQL消耗I0多，其中TID表示数据库线程的 LWTID，可通过如下过程找到对应的在运行SQL语句:(1)pidstat/iotop内目标TID;(2)通过查询 pg_thread_wait_status视图的lwtid为上一步内的TID，获取对应的tid和sessionid;(3)查询 pg_stat_activity视图内记录满足pid/sessionid为上一步内的tid/sessionid,即可找到造成IO高的session信息，包括具体的语句;接下来就可以单独去优化相关Query，减少IO量，可参考Chapter 1.4章节
    ·另外，可以通过WDR报告内SQL ordered by Physical Reads部分识别对应时间段内造成1读取量较大的Query
    ·对于IO量一直很大，如果是用户语句导致，也可参考Chapter 1.3章节的IO高相关内容

==========================================================================================

排查数据库所在系统资源是否有异常
·内存满
    ·内存不足有可能会导致程序执行缓慢。
    ·首先需要找到内存占用异常的进程，此处仅考虑gaussdb内存占用异常情况，其它进程不具有代表性意义，此处不过多描述。
    ·gaussdb进程内存占用异常，可参考·如果CPU一直较高，方法一:可直接使用WDR报告中SQL ordered by CPU Time部分，尝试优化分析相关语句，可参考WDR报告分析;方法二:可参考Chapter 1.3如果短时间CPU异常，可参考Chapter 1.3相关章节。

==========================================================================================

排查数据库所在系统资源是否有异常
·网络异常
    ·网络异常常见的有几种情况(1)网络不通(2)网络时延高(3)网络带宽满
    ·网络不通，这种场景在业务刚上线的时候，有时候会遇到，表现为数据库无压力，或者无某些业务服务器的连接，可查询pg stat activity相关视图内在线client连接IP信息。
    ·网络时延高，通常表现为业务侧数据反馈时延慢，数据库侧时延短，通过使用ping命令即可验证猜测;。网络带宽满，这种场景可能会比较少，一般网络带宽比较大，如果遇到这种情况可以查看ops和应用侧相关网络流量曲线，通常随着压力增长网络流量会上升，有时会遇到网络压力不再上涨，而且未达到网卡理论上限，此时可找网络同事分析相关异常点。

==========================================================================================

排查数据库是否使用不优
·并发问题
    ·此问题主要由于并发更新，产生的锁等待，从而导致业务时延上涨、TPS下降、或者线程池满等。此类问题定位可参考Chapter 1.3章节


==========================================================================================

排查数据库是否使用不优
·数据库配置问题
    ·正常情况下，客户环境上面的GUC配置是默认较优的，一般不需要特别调整。
    ·但某一些情况下，可能未使用默认配置或者客户环境有些微调的地方
    ·常见的可能情况有:(1)sharedbuffers配置过小，导致buffer淘汰频繁;(2)排序等算子可使用的 work_mem过小，导致异常下盘过多，建议根据业务情况适当优化;(3)线程池worker参数thread_pool_attr设置过小，导致业务排队具体情况可能比较多，可参考Chapter 1.5相关章节

==========================================================================================

排查数据库是否使用不优
·异常等待事件
    ·数据库内等待事件分为STATUSLWLOCK EVENTLOCK EVENTIO EVENT。识别异常等待事件通常是非常有效的整体性能慢的诊断手段·详细可参考Chapter 1.2相关章节。

==========================================================================================

排查数据库是否使用不优
·长时间性能下降
    ·长时间性能下降通常的场景，通常是指某段时间(小时级)性能抖动，比如:过去8:00-9:00性能正常，但10:00-11:11性能出现较大的性能抖动，这种场景，可以比较两段时间内WDR报告，排查报告内差异点，可排查:(1)Top SQL;(2) Top Wait Events;(3)Load Profile;(4)Cache/IO Stats;(5) Object Stats等

==========================================================================================

排查数据库是否使用不优
·短时性能抖动
    ·当前WDR快照默认为一小时一次，正常对于小时级的性能抖动，WDR足够覆盖这种场景。
    ·但当出现秒级性能抖动，因为性能视图多为累积值，WDR通常无法体现。
    ·这种场景可参考整体性能慢-视图分析性能抖动章节

==========================================================================================

排查数据库是否使用不优
·不优SQL
    ·当前数据库默认是开启线程池的，由于某些或者某个不优SQL慢，导致业务整体性能差，或者占满整个数据库线程池，从而可能会引发更加严重的业务阻塞。
    ·此处仅描述不优SQL识别，对于不优SQL的调优，可参考单Chapter 1.4相关章节，通常分为以下几种情况:
        ·当前正在执行的SQL大批量慢:这种场景比较常见，一般可以通过pg_stat_activity查询获取相关 SQL，可结合当前语句执行时间长短识别，如:(now0-query_start)as duration.
        ·发现大量慢SQL:通过OPS慢SQL指标可发现慢SQL数量短时间增加，并结合OPS的P80/P95 TPS、QPS等指标识别慢语句对整体时延的影响，如果明确相关，可查询慢语句表 statement history，找到目标慢语句，此处注意要切到postgres库。
        。过去某段时间业务反馈慢:(1)可以使用相应时间段的WDR，分析异常TOPSQL，可参考WDR报告分析章节部分内容;(2)另外通过active sessionprofile(ASP)，分析过去运行慢的SQL，可参考整体性能慢-视图分析